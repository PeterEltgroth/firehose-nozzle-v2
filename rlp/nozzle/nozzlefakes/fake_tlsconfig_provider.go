// Code generated by counterfeiter. DO NOT EDIT.
package nozzlefakes

import (
	"crypto/tls"
	"rlp/nozzle"
	"sync"
)

type FakeTLSConfigProvider struct {
	GetTLSConfigStub        func() (*tls.Config, error)
	getTLSConfigMutex       sync.RWMutex
	getTLSConfigArgsForCall []struct {
	}
	getTLSConfigReturns struct {
		result1 *tls.Config
		result2 error
	}
	getTLSConfigReturnsOnCall map[int]struct {
		result1 *tls.Config
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTLSConfigProvider) GetTLSConfig() (*tls.Config, error) {
	fake.getTLSConfigMutex.Lock()
	ret, specificReturn := fake.getTLSConfigReturnsOnCall[len(fake.getTLSConfigArgsForCall)]
	fake.getTLSConfigArgsForCall = append(fake.getTLSConfigArgsForCall, struct {
	}{})
	fake.recordInvocation("GetTLSConfig", []interface{}{})
	fake.getTLSConfigMutex.Unlock()
	if fake.GetTLSConfigStub != nil {
		return fake.GetTLSConfigStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTLSConfigReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTLSConfigProvider) GetTLSConfigCallCount() int {
	fake.getTLSConfigMutex.RLock()
	defer fake.getTLSConfigMutex.RUnlock()
	return len(fake.getTLSConfigArgsForCall)
}

func (fake *FakeTLSConfigProvider) GetTLSConfigCalls(stub func() (*tls.Config, error)) {
	fake.getTLSConfigMutex.Lock()
	defer fake.getTLSConfigMutex.Unlock()
	fake.GetTLSConfigStub = stub
}

func (fake *FakeTLSConfigProvider) GetTLSConfigReturns(result1 *tls.Config, result2 error) {
	fake.getTLSConfigMutex.Lock()
	defer fake.getTLSConfigMutex.Unlock()
	fake.GetTLSConfigStub = nil
	fake.getTLSConfigReturns = struct {
		result1 *tls.Config
		result2 error
	}{result1, result2}
}

func (fake *FakeTLSConfigProvider) GetTLSConfigReturnsOnCall(i int, result1 *tls.Config, result2 error) {
	fake.getTLSConfigMutex.Lock()
	defer fake.getTLSConfigMutex.Unlock()
	fake.GetTLSConfigStub = nil
	if fake.getTLSConfigReturnsOnCall == nil {
		fake.getTLSConfigReturnsOnCall = make(map[int]struct {
			result1 *tls.Config
			result2 error
		})
	}
	fake.getTLSConfigReturnsOnCall[i] = struct {
		result1 *tls.Config
		result2 error
	}{result1, result2}
}

func (fake *FakeTLSConfigProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTLSConfigMutex.RLock()
	defer fake.getTLSConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTLSConfigProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ nozzle.TLSConfigProvider = new(FakeTLSConfigProvider)
